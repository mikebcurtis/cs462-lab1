/*
 * File: app/controller/Controller.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Controller', {
    extend: 'Ext.app.Controller',

    stores: [
        'Users',
        'CurrentUser'
    ],

    refs: [
        {
            ref: 'loginNameTextfield',
            selector: 'loginwindow #loginNameTextfield'
        },
        {
            ref: 'loginPasswordTextfield',
            selector: 'loginwindow #loginPasswordTextfield'
        },
        {
            ref: 'createNameTextfield',
            selector: 'createaccountwindow #createNameTextfield'
        },
        {
            ref: 'createPasswordTextfield',
            selector: 'createaccountwindow #createPasswordTextfield'
        },
        {
            ref: 'welcomeText',
            selector: '#mainPanel #welcomeText'
        },
        {
            ref: 'loginButton',
            selector: '#mainPanel #loginButton'
        },
        {
            ref: 'logoutButton',
            selector: '#mainPanel #logoutButton'
        }
    ],

    onLoginWindowButtonClick: function(button, e, eOpts) {
        /*var name = this.getLoginNameTextfield().getRawValue();
        var pass = this.getLoginPasswordTextfield().getRawValue();

        if (login(name,pass)) {
        button.up('window').destroy();
        }
        else {
        alert("Credentials do not match. Try again.");
        }
        */

        var name = this.getLoginNameTextfield().getRawValue();
        var pass = this.getLoginPasswordTextfield().getRawValue();

        Ext.Ajax.request({
            method: 'POST',
            url: '/login',
            params: {
                name: name,
                pass: pass
            },
            scope: this,
            success: function(response){
                var res = Ext.decode(response.responseText);
                if (res["results"] === true) {
                    this.login(name, pass);

                    button.up('window').destroy();
                }

                Ext.Msg.alert("Login", res["message"]);
            }
        });
    },

    onLoginButtonClick: function(button, e, eOpts) {
        var window = Ext.create('widget.loginwindow');
        window.show();
    },

    onLogoutButtonClick: function(button, e, eOpts) {
        this.getCurrentUserStore().removeAll();
        button.setVisible(false);
        this.getLoginButton().setVisible(true);
        this.getWelcomeText().setText("");
    },

    onCreateAccountButtonClick: function(button, e, eOpts) {
        var window = Ext.create('widget.createaccountwindow');
        window.show();
    },

    onCreateWindowButtonClick: function(button, e, eOpts) {
        // logout current user if necessary
        if (this.getCurrentUserStore().count() >= 1) {
            this.onLogoutButtonClick(this.getLogoutButton(), {}, {});
        }

        var name = this.getCreateNameTextfield().getRawValue();
        var pass = this.getCreatePasswordTextfield().getRawValue();

        Ext.Ajax.request({
            method: 'POST',
            url: '/users/' + encodeURIComponent(name),
            params: {
                pass: pass
            },
            scope: this,
            success: function(response){
                var res = Ext.decode(response.responseText);
                if (res["results"] === true) {
                    this.getUsersStore().add(res["data"]);
                    this.login(name, pass);           

                    button.up('window').destroy();
                }

                Ext.Msg.alert("Create User", res["message"]);
            }
        });
    },

    onLogoutButtonRender: function(component, eOpts) {
        component.setVisible(false);
    },

    onUserSelect: function(rowmodel, record, index, eOpts) {
        var params = {};
        if (this.getCurrentUserStore().count() > 0 && record.get('name') === this.getCurrentUserStore().first().get('name') && record.get('access_token') !== undefined) {
            this.getCheckins(record.get('name'), record.get('pass'), record.get('access_token'));
        }
        else if (this.getCurrentUserStore().count() > 0 && record.get('name') === this.getCurrentUserStore().first().get('name')) {
            var redirect = encodeURIComponent("http:///ec2-54-80-167-106.compute-1.amazonaws.com/foursquare_redirect");
            var url = "https://foursquare.com/oauth2/authenticate?client_id=FXDWFN5WXZ0VHZGO3C3QMF5SS42S40H3HTDYOW1SDCBXY3MV&response_type=code&redirect_uri=" + redirect;
            Ext.Msg.alert("Connect to Foursquare", "<a href='" + url + "'>Click Here</a> to connect to Foursquare.");
        }
    },

    login: function(name, pass) {
        this.getCurrentUserStore().removeAll();
        var users = this.getUsersStore();
        this.getCurrentUserStore().add(users.getAt(users.find('name', name)));

        this.getWelcomeText().setText("Welcome " + name + "!");

        //this.getLoginButton().setDisabled(true);
        //this.getLogoutButton().setDisabled(false);            

        this.getLoginButton().setVisible(false);
        this.getLogoutButton().setVisible(true); 
    },

    getCheckins: function(user, pass, access_token) {
        Ext.Ajax.request({
            method: 'GET',
            url: '/checkins',
            params: params,
            scope: this,
            success: function(response){
                var res = Ext.decode(response.responseText);
                if (res["results"] === true) {
                    console.log("retrieved checkins: " + res["data"]); // DEBUG
                }

                Ext.Msg.alert("Login", res["message"]);
            }
        });
    },

    init: function(application) {
        this.control({
            "loginwindow #loginWindowButton": {
                click: this.onLoginWindowButtonClick
            },
            "#mainPanel #loginButton": {
                click: this.onLoginButtonClick
            },
            "#mainPanel #logoutButton": {
                click: this.onLogoutButtonClick,
                render: this.onLogoutButtonRender
            },
            "#mainPanel #createAccountButton": {
                click: this.onCreateAccountButtonClick
            },
            "createaccountwindow #createWindowButton": {
                click: this.onCreateWindowButtonClick
            },
            "#usersPanel": {
                select: this.onUserSelect
            }
        });
    }

});
